Min Soo Kim, mk374

Run WordGramDiver for wordgrams of size 2-10 and record
the number of WordGram values/objects that occur more than
once as reported by the runs. For example, with WSIZE = 2,
which generates 2-grams, the output of benchmark and benchmarkShift
each indicates that the total # wordgrams generated is 177,634
and that the # unique wordgrams is 117,181

This means there are 177,634 - 117,181 = 60,453 WordGram values that
occur more than once. Find these same values for other orders
of k and complete the table below for different k-grams/different 
values of WSIZE

WSIZE    # duplicates
2        60,453
3        10,756
4		 1987
5		 667
6		 362
7	 	 226
8		 151
9        105
10	     73

=====
Explain in your own words the conceptual differences between 
the benchmark and benchmarkShift methods. 
benchmark: first puts all the words in the file into an ArrayList, and then goes through the ArrayList, getting WSIZE WordGrams and adding
them into a set
benchmarkShift: on the other hand, this first gets the first WordGram and then goes through the file, adding WSIZE WordGrams along the way
also into a set
Answer these questions: 

(1) Why the results of these methods should be the same in 
terms of changes made to the HashSet parameter.
Both are putting WordGrams into a HashSet, so all repeats are thrown away and all the resulting WordGrams are different from each other.
(2) What are the conceptual differences between the two
benchmarking methods
benchmark: first puts all the words in the file into an ArrayList, and then goes through the ArrayList, getting WSIZE WordGrams and adding
them into a set
benchmarkShift: on the other hand, this first gets the first WordGram with an array and then goes through the file, adding WSIZE WordGrams along the way
also into a set
(3) Is the total amount of memory allocated for arrays
the same or different in the two methods? Account for
arrays created in the methods and arrays created by
WordGram objects. Try to be quantitative in answering.
It is different. Although benchmark and benchmarkShift both use the same number of WordGrams because
shiftAdd is the same as making a new WordGram, the memory allocation is different because benchmark,
in the beginning, creates this massive array, that is of the file's length. On the other hand,
benchmarkShift only creates a relatively small array with size WSIZE for the first WordGram, so in the 
end, benchmark, ultimately, uses up more memory.
Benchmark --> array of file size. --> makes new WordGrams while going through that array
Benchmark --> array of WSIZE --> makes the same new number of WordGrams while going through the file,
without any referencing to any array.





